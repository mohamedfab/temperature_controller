
temperature_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000006ec  00000760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bcc  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000067f  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000029f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac1  00000000  00000000  00002ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043a  00000000  00000000  00003587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000540  00000000  00000000  000039c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00003f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000290  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  7a:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adcInit>:
#include <avr/io.h>
#include "adc.h"
#include "lcd.h"
void adcInit()
  {
	ADMUX|=(AVCC5V_REF<<6);
  82:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA=(ADC_ENABLE)|(ADCPS_128);
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <adcRead>:
  }
  
uint16_t adcRead(uint8_t chnl)
  {
      uint16_t result;
	  ADMUX|=chnl;
  8a:	97 b1       	in	r25, 0x07	; 7
  8c:	89 2b       	or	r24, r25
  8e:	87 b9       	out	0x07, r24	; 7
	  ADCSRA|=(ADC_START_CONVERSION);
  90:	36 9a       	sbi	0x06, 6	; 6
	  while(!(ADCSRA & (1<<ADIF)));
  92:	34 9b       	sbis	0x06, 4	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <adcRead+0x8>
	  ADCSRA|=(1<<ADIF);	 
  96:	34 9a       	sbi	0x06, 4	; 6
      result=(ADCL|(ADCH<<8));
  98:	24 b1       	in	r18, 0x04	; 4
  9a:	35 b1       	in	r19, 0x05	; 5
  9c:	93 2f       	mov	r25, r19
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	ac 01       	movw	r20, r24
  a2:	42 2b       	or	r20, r18
  a4:	9a 01       	movw	r18, r20
	  return result;
	    
  a6:	82 2f       	mov	r24, r18
  a8:	93 2f       	mov	r25, r19
  aa:	08 95       	ret

000000ac <enablePulse>:
#include <util/delay.h>
#include "lcd.h"

static void enablePulse()
        {
	      LCD_CTRL_PORT|=(1<<EN);
  ac:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <enablePulse+0x4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <enablePulse+0xa>
	      _delay_us(1);
	      LCD_CTRL_PORT&=~(1<<EN);
  b6:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	97 e2       	ldi	r25, 0x27	; 39
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <enablePulse+0x10>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <enablePulse+0x16>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <lcdWrite>:
	     _delay_ms(5);
       }
	   
void lcdWrite(unsigned char data)
{
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0X0F)|(data&0xf0);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
	enablePulse();
  d6:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcdWrite+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcdWrite+0x1e>
  e4:	00 00       	nop
	_delay_ms(5);
	LCD_DATA_PORT=(LCD_DATA_PORT&0X0F)|(data<<4);
  e6:	2b b3       	in	r18, 0x1b	; 27
  e8:	30 e1       	ldi	r19, 0x10	; 16
  ea:	c3 9f       	mul	r28, r19
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	92 2f       	mov	r25, r18
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	89 2b       	or	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
	enablePulse();
  f8:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcdWrite+0x3a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcdWrite+0x40>
 106:	00 00       	nop
	_delay_ms(5);
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcdCmd>:

void lcdCmd(unsigned char cmd)
{
	LCD_CTRL_PORT&=~(1<<RW);  //write mode
 10c:	c2 98       	cbi	0x18, 2	; 24
	LCD_CTRL_PORT&=~(1<<RS);  //cmd mode
 10e:	c1 98       	cbi	0x18, 1	; 24
	lcdWrite(cmd);
 110:	0e 94 63 00 	call	0xc6	; 0xc6 <lcdWrite>
 114:	08 95       	ret

00000116 <lcdData>:
}


void lcdData(unsigned char data)
{
	LCD_CTRL_PORT&=~(1<<RW);  //write mode
 116:	c2 98       	cbi	0x18, 2	; 24
	LCD_CTRL_PORT|=(1<<RS);  //cmd mode
 118:	c1 9a       	sbi	0x18, 1	; 24
	lcdWrite(data);
 11a:	0e 94 63 00 	call	0xc6	; 0xc6 <lcdWrite>
 11e:	08 95       	ret

00000120 <lcdPuts>:
}

void lcdPuts(char *str)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	while(*str !='\0')
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <lcdPuts+0x18>
	LCD_CTRL_PORT&=~(1<<RW);  //write mode
	LCD_CTRL_PORT|=(1<<RS);  //cmd mode
	lcdWrite(data);
}

void lcdPuts(char *str)
 12c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str !='\0')
	{
		lcdData(*str++);
 12e:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
	lcdWrite(data);
}

void lcdPuts(char *str)
{
	while(*str !='\0')
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fb cf       	rjmp	.-10     	; 0x12e <lcdPuts+0xe>
	{
		lcdData(*str++);
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcdGotoRowColumn>:

void lcdGotoRowColumn(unsigned char row,unsigned char column)
   {
	column--;
 13e:	61 50       	subi	r22, 0x01	; 1
	switch (row)
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	71 f0       	breq	.+28     	; 0x160 <lcdGotoRowColumn+0x22>
 144:	18 f4       	brcc	.+6      	; 0x14c <lcdGotoRowColumn+0xe>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	c9 f4       	brne	.+50     	; 0x17c <lcdGotoRowColumn+0x3e>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <lcdGotoRowColumn+0x18>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	69 f0       	breq	.+26     	; 0x16a <lcdGotoRowColumn+0x2c>
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	a1 f4       	brne	.+40     	; 0x17c <lcdGotoRowColumn+0x3e>
 154:	0f c0       	rjmp	.+30     	; 0x174 <lcdGotoRowColumn+0x36>
	   {
		case 1:
		      lcdCmd(0x80+column);
 156:	86 2f       	mov	r24, r22
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
		      break;
 15e:	08 95       	ret
		case 2:
		      lcdCmd(0xC0+column);
 160:	86 2f       	mov	r24, r22
 162:	80 54       	subi	r24, 0x40	; 64
 164:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
		      break;
 168:	08 95       	ret
		case 3:
		      lcdCmd(0x94+column);
 16a:	86 2f       	mov	r24, r22
 16c:	8c 56       	subi	r24, 0x6C	; 108
 16e:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
		      break;
 172:	08 95       	ret
		case 4:
		      lcdCmd(0xD4+column);
 174:	86 2f       	mov	r24, r22
 176:	8c 52       	subi	r24, 0x2C	; 44
 178:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
 17c:	08 95       	ret

0000017e <lcdInit>:
	
void lcdInit()
{
	/*configure micro controller pins*/
	
	LCD_DATA_PORT_DIR|=0xF0;
 17e:	8a b3       	in	r24, 0x1a	; 26
 180:	80 6f       	ori	r24, 0xF0	; 240
 182:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT&=0x0F;
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	8b bb       	out	0x1b, r24	; 27
	
	LCD_CTRL_PORT_DIR=(1<<RS)|(1<<RW)|(1<<EN);
 18a:	8e e0       	ldi	r24, 0x0E	; 14
 18c:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT&=~((1<<RS)|(1<<RW)|(1<<EN));
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	81 7f       	andi	r24, 0xF1	; 241
 192:	88 bb       	out	0x18, r24	; 24
	//LCD_DATA_PORT|=(1<<PINC3);
	
	
	MCUCSR = 0x80;
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	84 bf       	out	0x34, r24	; 52
	MCUCSR = 0x80;
 198:	84 bf       	out	0x34, r24	; 52
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	9e e4       	ldi	r25, 0x4E	; 78
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcdInit+0x20>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcdInit+0x26>
 1a4:	00 00       	nop

	/*initialize LCD*/
	_delay_ms(10);
	LCD_CTRL_PORT&=~(1<<RW);  //write mode
 1a6:	c2 98       	cbi	0x18, 2	; 24
	LCD_CTRL_PORT&=~(1<<RS);  //cmd mode
 1a8:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_DATA_PORT|=(1<<PINA4);
 1aa:	dc 9a       	sbi	0x1b, 4	; 27
	LCD_DATA_PORT|=(1<<PINA5);
 1ac:	dd 9a       	sbi	0x1b, 5	; 27
	
	enablePulse();
 1ae:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
	enablePulse();
 1b2:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
	enablePulse();
 1b6:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
	
	LCD_DATA_PORT&=~(1<<PINA4); //clear enable pin
 1ba:	dc 98       	cbi	0x1b, 4	; 27
	enablePulse();
 1bc:	0e 94 56 00 	call	0xac	; 0xac <enablePulse>
	lcdCmd(0x28);
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
	lcdCmd(0x0F);    //display on cursor off
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
	lcdCmd(0xF0);
 1cc:	80 ef       	ldi	r24, 0xF0	; 240
 1ce:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
	lcdCmd(0x01);   //clear LCD
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
	lcdCmd(0x06);  //increment cursor (shift cursor to right)
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
 1de:	08 95       	ret

000001e0 <actuatorsInit>:
#define TURN_HEATER_ON   (PORTC&=~(1<<HEATER))
#define TURN_HEATER_OFF   (PORTC|=(1<<HEATER))

void actuatorsInit()
	{
	 DDRC|=(1<<FAN);
 1e0:	a4 9a       	sbi	0x14, 4	; 20
	 PORTC|=(1<<FAN);
 1e2:	ac 9a       	sbi	0x15, 4	; 21
	 DDRC|=(1<<HEATER);
 1e4:	a5 9a       	sbi	0x14, 5	; 20
	 PORTC|=(1<<HEATER);
 1e6:	ad 9a       	sbi	0x15, 5	; 21
 1e8:	08 95       	ret

000001ea <displayFormat>:
	}

void displayFormat()
   {
	lcdCmd(_LCD_CURSOR_OFF);
 1ea:	8c e0       	ldi	r24, 0x0C	; 12
 1ec:	0e 94 86 00 	call	0x10c	; 0x10c <lcdCmd>
	lcdGotoRowColumn(1,1);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
	lcdPuts("Temp| ");
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
	lcdPuts("Fan | ");
 200:	87 e6       	ldi	r24, 0x67	; 103
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
	lcdPuts("Heat");
 208:	8e e6       	ldi	r24, 0x6E	; 110
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
	lcdGotoRowColumn(2,5);
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
	lcdData('|');
 218:	8c e7       	ldi	r24, 0x7C	; 124
 21a:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
	lcdGotoRowColumn(2,11);
 21e:	6b e0       	ldi	r22, 0x0B	; 11
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
	lcdData('|');
 226:	8c e7       	ldi	r24, 0x7C	; 124
 228:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
 22c:	08 95       	ret

0000022e <main>:
   }
int main(void)
{
	uint16_t temp;
	actuatorsInit();
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <actuatorsInit>
	lcdInit();
 232:	0e 94 bf 00 	call	0x17e	; 0x17e <lcdInit>
	adcInit();
 236:	0e 94 41 00 	call	0x82	; 0x82 <adcInit>
	displayFormat();
 23a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <displayFormat>
    while(1)
        {
         lcdGotoRowColumn(2,2);
		 temp=sensorTempRead();
		 lcdData(temp%1000/100+48);
 23e:	c8 ee       	ldi	r28, 0xE8	; 232
 240:	d3 e0       	ldi	r29, 0x03	; 3
		 lcdData(temp%1000%100/10+48);
 242:	0f 2e       	mov	r0, r31
 244:	f4 e6       	ldi	r31, 0x64	; 100
 246:	bf 2e       	mov	r11, r31
 248:	f0 2d       	mov	r31, r0
	lcdInit();
	adcInit();
	displayFormat();
    while(1)
        {
         lcdGotoRowColumn(2,2);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
		 temp=sensorTempRead();
 252:	0e 94 c8 01 	call	0x390	; 0x390 <sensorTempRead>
 256:	0e 94 4b 02 	call	0x496	; 0x496 <__fixunssfsi>
 25a:	8b 01       	movw	r16, r22
		 lcdData(temp%1000/100+48);
 25c:	9b 01       	movw	r18, r22
 25e:	36 95       	lsr	r19
 260:	27 95       	ror	r18
 262:	36 95       	lsr	r19
 264:	27 95       	ror	r18
 266:	36 95       	lsr	r19
 268:	27 95       	ror	r18
 26a:	a5 ec       	ldi	r26, 0xC5	; 197
 26c:	b0 e2       	ldi	r27, 0x20	; 32
 26e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__umulhisi3>
 272:	7c 01       	movw	r14, r24
 274:	f6 94       	lsr	r15
 276:	e7 94       	ror	r14
 278:	f6 94       	lsr	r15
 27a:	e7 94       	ror	r14
 27c:	f6 94       	lsr	r15
 27e:	e7 94       	ror	r14
 280:	f6 94       	lsr	r15
 282:	e7 94       	ror	r14
 284:	ec 9e       	mul	r14, r28
 286:	c0 01       	movw	r24, r0
 288:	ed 9e       	mul	r14, r29
 28a:	90 0d       	add	r25, r0
 28c:	fc 9e       	mul	r15, r28
 28e:	90 0d       	add	r25, r0
 290:	11 24       	eor	r1, r1
 292:	78 01       	movw	r14, r16
 294:	e8 1a       	sub	r14, r24
 296:	f9 0a       	sbc	r15, r25
 298:	97 01       	movw	r18, r14
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	36 95       	lsr	r19
 2a0:	27 95       	ror	r18
 2a2:	ab e7       	ldi	r26, 0x7B	; 123
 2a4:	b4 e1       	ldi	r27, 0x14	; 20
 2a6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__umulhisi3>
 2aa:	6c 01       	movw	r12, r24
 2ac:	d6 94       	lsr	r13
 2ae:	c7 94       	ror	r12
 2b0:	8c 2d       	mov	r24, r12
 2b2:	80 5d       	subi	r24, 0xD0	; 208
 2b4:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
		 lcdData(temp%1000%100/10+48);
 2b8:	bc 9c       	mul	r11, r12
 2ba:	c0 01       	movw	r24, r0
 2bc:	bd 9c       	mul	r11, r13
 2be:	90 0d       	add	r25, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	e8 1a       	sub	r14, r24
 2c4:	f9 0a       	sbc	r15, r25
 2c6:	97 01       	movw	r18, r14
 2c8:	ad ec       	ldi	r26, 0xCD	; 205
 2ca:	bc ec       	ldi	r27, 0xCC	; 204
 2cc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__umulhisi3>
 2d0:	6c 01       	movw	r12, r24
 2d2:	d6 94       	lsr	r13
 2d4:	c7 94       	ror	r12
 2d6:	d6 94       	lsr	r13
 2d8:	c7 94       	ror	r12
 2da:	d6 94       	lsr	r13
 2dc:	c7 94       	ror	r12
 2de:	8c 2d       	mov	r24, r12
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
		 lcdData(temp%1000%100%10+48);
 2e6:	c6 01       	movw	r24, r12
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	cc 0c       	add	r12, r12
 2ee:	dd 1c       	adc	r13, r13
 2f0:	cc 0c       	add	r12, r12
 2f2:	dd 1c       	adc	r13, r13
 2f4:	cc 0c       	add	r12, r12
 2f6:	dd 1c       	adc	r13, r13
 2f8:	c8 0e       	add	r12, r24
 2fa:	d9 1e       	adc	r13, r25
 2fc:	c7 01       	movw	r24, r14
 2fe:	8c 19       	sub	r24, r12
 300:	9d 09       	sbc	r25, r13
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 8b 00 	call	0x116	; 0x116 <lcdData>
		 
		 if (temp>=17&&temp<=20) 
 308:	c8 01       	movw	r24, r16
 30a:	41 97       	sbiw	r24, 0x11	; 17
 30c:	04 97       	sbiw	r24, 0x04	; 4
 30e:	98 f4       	brcc	.+38     	; 0x336 <main+0x108>
			{
			 TURN_FAN_OFF;
 310:	ac 9a       	sbi	0x15, 4	; 21
			 TURN_HEATER_OFF;
 312:	ad 9a       	sbi	0x15, 5	; 21
			 lcdGotoRowColumn(2,7);
 314:	67 e0       	ldi	r22, 0x07	; 7
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
			 lcdPuts("OFF");
 31c:	83 e7       	ldi	r24, 0x73	; 115
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
			 lcdGotoRowColumn(2,13);
 324:	6d e0       	ldi	r22, 0x0D	; 13
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
			 lcdPuts("OFF");
 32c:	83 e7       	ldi	r24, 0x73	; 115
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
 334:	8a cf       	rjmp	.-236    	; 0x24a <main+0x1c>
			}
		 else if (temp>20)
 336:	05 31       	cpi	r16, 0x15	; 21
 338:	11 05       	cpc	r17, r1
 33a:	98 f0       	brcs	.+38     	; 0x362 <main+0x134>
		     {
		        TURN_FAN_ON;
 33c:	ac 98       	cbi	0x15, 4	; 21
				TURN_HEATER_OFF;
 33e:	ad 9a       	sbi	0x15, 5	; 21
				lcdGotoRowColumn(2,7);
 340:	67 e0       	ldi	r22, 0x07	; 7
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
				lcdPuts("ON ");
 348:	87 e7       	ldi	r24, 0x77	; 119
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
				lcdGotoRowColumn(2,13);
 350:	6d e0       	ldi	r22, 0x0D	; 13
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
				lcdPuts("OFF");
 358:	83 e7       	ldi	r24, 0x73	; 115
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
 360:	74 cf       	rjmp	.-280    	; 0x24a <main+0x1c>
				   
			}
		else if (temp<20)
 362:	04 31       	cpi	r16, 0x14	; 20
 364:	11 05       	cpc	r17, r1
 366:	08 f0       	brcs	.+2      	; 0x36a <main+0x13c>
 368:	70 cf       	rjmp	.-288    	; 0x24a <main+0x1c>
		   {  
			TURN_FAN_ON;
 36a:	ac 98       	cbi	0x15, 4	; 21
			TURN_HEATER_ON;
 36c:	ad 98       	cbi	0x15, 5	; 21
			lcdGotoRowColumn(2,7);
 36e:	67 e0       	ldi	r22, 0x07	; 7
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
			lcdPuts("ON ");
 376:	87 e7       	ldi	r24, 0x77	; 119
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
			lcdGotoRowColumn(2,13);
 37e:	6d e0       	ldi	r22, 0x0D	; 13
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 9f 00 	call	0x13e	; 0x13e <lcdGotoRowColumn>
			lcdPuts("ON ");
 386:	87 e7       	ldi	r24, 0x77	; 119
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 90 00 	call	0x120	; 0x120 <lcdPuts>
 38e:	5d cf       	rjmp	.-326    	; 0x24a <main+0x1c>

00000390 <sensorTempRead>:

double sensorTempRead()
	{
	   uint16_t adcResult;
	   double temp;
	   adcResult=adcRead(SENSOR_CHANEL);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 45 00 	call	0x8a	; 0x8a <adcRead>
	   temp=4.8*adcResult;
 396:	bc 01       	movw	r22, r24
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 77 02 	call	0x4ee	; 0x4ee <__floatunsisf>
 3a0:	2a e9       	ldi	r18, 0x9A	; 154
 3a2:	39 e9       	ldi	r19, 0x99	; 153
 3a4:	49 e9       	ldi	r20, 0x99	; 153
 3a6:	50 e4       	ldi	r21, 0x40	; 64
 3a8:	0e 94 05 03 	call	0x60a	; 0x60a <__mulsf3>
	   temp=temp/10;
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e2       	ldi	r20, 0x20	; 32
 3b2:	51 e4       	ldi	r21, 0x41	; 65
 3b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
	   return (uint16_t)temp;
 3b8:	0e 94 4b 02 	call	0x496	; 0x496 <__fixunssfsi>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 77 02 	call	0x4ee	; 0x4ee <__floatunsisf>
 3c4:	08 95       	ret

000003c6 <__divsf3>:
 3c6:	0c d0       	rcall	.+24     	; 0x3e0 <__divsf3x>
 3c8:	e6 c0       	rjmp	.+460    	; 0x596 <__fp_round>
 3ca:	de d0       	rcall	.+444    	; 0x588 <__fp_pscB>
 3cc:	40 f0       	brcs	.+16     	; 0x3de <__divsf3+0x18>
 3ce:	d5 d0       	rcall	.+426    	; 0x57a <__fp_pscA>
 3d0:	30 f0       	brcs	.+12     	; 0x3de <__divsf3+0x18>
 3d2:	21 f4       	brne	.+8      	; 0x3dc <__divsf3+0x16>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	19 f0       	breq	.+6      	; 0x3de <__divsf3+0x18>
 3d8:	c7 c0       	rjmp	.+398    	; 0x568 <__fp_inf>
 3da:	51 11       	cpse	r21, r1
 3dc:	10 c1       	rjmp	.+544    	; 0x5fe <__fp_szero>
 3de:	ca c0       	rjmp	.+404    	; 0x574 <__fp_nan>

000003e0 <__divsf3x>:
 3e0:	eb d0       	rcall	.+470    	; 0x5b8 <__fp_split3>
 3e2:	98 f3       	brcs	.-26     	; 0x3ca <__divsf3+0x4>

000003e4 <__divsf3_pse>:
 3e4:	99 23       	and	r25, r25
 3e6:	c9 f3       	breq	.-14     	; 0x3da <__divsf3+0x14>
 3e8:	55 23       	and	r21, r21
 3ea:	b1 f3       	breq	.-20     	; 0x3d8 <__divsf3+0x12>
 3ec:	95 1b       	sub	r25, r21
 3ee:	55 0b       	sbc	r21, r21
 3f0:	bb 27       	eor	r27, r27
 3f2:	aa 27       	eor	r26, r26
 3f4:	62 17       	cp	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__divsf3_pse+0x26>
 3fc:	9f 5f       	subi	r25, 0xFF	; 255
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	44 1f       	adc	r20, r20
 406:	aa 1f       	adc	r26, r26
 408:	a9 f3       	breq	.-22     	; 0x3f4 <__divsf3_pse+0x10>
 40a:	33 d0       	rcall	.+102    	; 0x472 <__divsf3_pse+0x8e>
 40c:	0e 2e       	mov	r0, r30
 40e:	3a f0       	brmi	.+14     	; 0x41e <__divsf3_pse+0x3a>
 410:	e0 e8       	ldi	r30, 0x80	; 128
 412:	30 d0       	rcall	.+96     	; 0x474 <__divsf3_pse+0x90>
 414:	91 50       	subi	r25, 0x01	; 1
 416:	50 40       	sbci	r21, 0x00	; 0
 418:	e6 95       	lsr	r30
 41a:	00 1c       	adc	r0, r0
 41c:	ca f7       	brpl	.-14     	; 0x410 <__divsf3_pse+0x2c>
 41e:	29 d0       	rcall	.+82     	; 0x472 <__divsf3_pse+0x8e>
 420:	fe 2f       	mov	r31, r30
 422:	27 d0       	rcall	.+78     	; 0x472 <__divsf3_pse+0x8e>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	bb 1f       	adc	r27, r27
 42c:	26 17       	cp	r18, r22
 42e:	37 07       	cpc	r19, r23
 430:	48 07       	cpc	r20, r24
 432:	ab 07       	cpc	r26, r27
 434:	b0 e8       	ldi	r27, 0x80	; 128
 436:	09 f0       	breq	.+2      	; 0x43a <__divsf3_pse+0x56>
 438:	bb 0b       	sbc	r27, r27
 43a:	80 2d       	mov	r24, r0
 43c:	bf 01       	movw	r22, r30
 43e:	ff 27       	eor	r31, r31
 440:	93 58       	subi	r25, 0x83	; 131
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	2a f0       	brmi	.+10     	; 0x450 <__divsf3_pse+0x6c>
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	51 05       	cpc	r21, r1
 44a:	68 f0       	brcs	.+26     	; 0x466 <__divsf3_pse+0x82>
 44c:	8d c0       	rjmp	.+282    	; 0x568 <__fp_inf>
 44e:	d7 c0       	rjmp	.+430    	; 0x5fe <__fp_szero>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	ec f3       	brlt	.-6      	; 0x44e <__divsf3_pse+0x6a>
 454:	98 3e       	cpi	r25, 0xE8	; 232
 456:	dc f3       	brlt	.-10     	; 0x44e <__divsf3_pse+0x6a>
 458:	86 95       	lsr	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b7 95       	ror	r27
 460:	f7 95       	ror	r31
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	c9 f7       	brne	.-14     	; 0x458 <__divsf3_pse+0x74>
 466:	88 0f       	add	r24, r24
 468:	91 1d       	adc	r25, r1
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	97 f9       	bld	r25, 7
 470:	08 95       	ret
 472:	e1 e0       	ldi	r30, 0x01	; 1
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	bb 1f       	adc	r27, r27
 47c:	62 17       	cp	r22, r18
 47e:	73 07       	cpc	r23, r19
 480:	84 07       	cpc	r24, r20
 482:	ba 07       	cpc	r27, r26
 484:	20 f0       	brcs	.+8      	; 0x48e <__divsf3_pse+0xaa>
 486:	62 1b       	sub	r22, r18
 488:	73 0b       	sbc	r23, r19
 48a:	84 0b       	sbc	r24, r20
 48c:	ba 0b       	sbc	r27, r26
 48e:	ee 1f       	adc	r30, r30
 490:	88 f7       	brcc	.-30     	; 0x474 <__divsf3_pse+0x90>
 492:	e0 95       	com	r30
 494:	08 95       	ret

00000496 <__fixunssfsi>:
 496:	98 d0       	rcall	.+304    	; 0x5c8 <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x26>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	90 f0       	brcs	.+36     	; 0x4c2 <__fixunssfsi+0x2c>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	a0 f0       	brcs	.+40     	; 0x4ce <__fixunssfsi+0x38>
 4a6:	d1 f0       	breq	.+52     	; 0x4dc <__fixunssfsi+0x46>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x22>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x12>
 4b6:	12 c0       	rjmp	.+36     	; 0x4dc <__fixunssfsi+0x46>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	81 f0       	breq	.+32     	; 0x4dc <__fixunssfsi+0x46>
 4bc:	9f d0       	rcall	.+318    	; 0x5fc <__fp_zero>
 4be:	b1 e0       	ldi	r27, 0x01	; 1
 4c0:	08 95       	ret
 4c2:	9c c0       	rjmp	.+312    	; 0x5fc <__fp_zero>
 4c4:	67 2f       	mov	r22, r23
 4c6:	78 2f       	mov	r23, r24
 4c8:	88 27       	eor	r24, r24
 4ca:	b8 5f       	subi	r27, 0xF8	; 248
 4cc:	39 f0       	breq	.+14     	; 0x4dc <__fixunssfsi+0x46>
 4ce:	b9 3f       	cpi	r27, 0xF9	; 249
 4d0:	cc f3       	brlt	.-14     	; 0x4c4 <__fixunssfsi+0x2e>
 4d2:	86 95       	lsr	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b3 95       	inc	r27
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <__fixunssfsi+0x3c>
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__fixunssfsi+0x56>
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__floatunsisf>:
 4ee:	e8 94       	clt
 4f0:	09 c0       	rjmp	.+18     	; 0x504 <__floatsisf+0x12>

000004f2 <__floatsisf>:
 4f2:	97 fb       	bst	r25, 7
 4f4:	3e f4       	brtc	.+14     	; 0x504 <__floatsisf+0x12>
 4f6:	90 95       	com	r25
 4f8:	80 95       	com	r24
 4fa:	70 95       	com	r23
 4fc:	61 95       	neg	r22
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	99 23       	and	r25, r25
 506:	a9 f0       	breq	.+42     	; 0x532 <__floatsisf+0x40>
 508:	f9 2f       	mov	r31, r25
 50a:	96 e9       	ldi	r25, 0x96	; 150
 50c:	bb 27       	eor	r27, r27
 50e:	93 95       	inc	r25
 510:	f6 95       	lsr	r31
 512:	87 95       	ror	r24
 514:	77 95       	ror	r23
 516:	67 95       	ror	r22
 518:	b7 95       	ror	r27
 51a:	f1 11       	cpse	r31, r1
 51c:	f8 cf       	rjmp	.-16     	; 0x50e <__floatsisf+0x1c>
 51e:	fa f4       	brpl	.+62     	; 0x55e <__floatsisf+0x6c>
 520:	bb 0f       	add	r27, r27
 522:	11 f4       	brne	.+4      	; 0x528 <__floatsisf+0x36>
 524:	60 ff       	sbrs	r22, 0
 526:	1b c0       	rjmp	.+54     	; 0x55e <__floatsisf+0x6c>
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	16 c0       	rjmp	.+44     	; 0x55e <__floatsisf+0x6c>
 532:	88 23       	and	r24, r24
 534:	11 f0       	breq	.+4      	; 0x53a <__floatsisf+0x48>
 536:	96 e9       	ldi	r25, 0x96	; 150
 538:	11 c0       	rjmp	.+34     	; 0x55c <__floatsisf+0x6a>
 53a:	77 23       	and	r23, r23
 53c:	21 f0       	breq	.+8      	; 0x546 <__floatsisf+0x54>
 53e:	9e e8       	ldi	r25, 0x8E	; 142
 540:	87 2f       	mov	r24, r23
 542:	76 2f       	mov	r23, r22
 544:	05 c0       	rjmp	.+10     	; 0x550 <__floatsisf+0x5e>
 546:	66 23       	and	r22, r22
 548:	71 f0       	breq	.+28     	; 0x566 <__floatsisf+0x74>
 54a:	96 e8       	ldi	r25, 0x86	; 134
 54c:	86 2f       	mov	r24, r22
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	2a f0       	brmi	.+10     	; 0x55e <__floatsisf+0x6c>
 554:	9a 95       	dec	r25
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	da f7       	brpl	.-10     	; 0x554 <__floatsisf+0x62>
 55e:	88 0f       	add	r24, r24
 560:	96 95       	lsr	r25
 562:	87 95       	ror	r24
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret

00000568 <__fp_inf>:
 568:	97 f9       	bld	r25, 7
 56a:	9f 67       	ori	r25, 0x7F	; 127
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	08 95       	ret

00000574 <__fp_nan>:
 574:	9f ef       	ldi	r25, 0xFF	; 255
 576:	80 ec       	ldi	r24, 0xC0	; 192
 578:	08 95       	ret

0000057a <__fp_pscA>:
 57a:	00 24       	eor	r0, r0
 57c:	0a 94       	dec	r0
 57e:	16 16       	cp	r1, r22
 580:	17 06       	cpc	r1, r23
 582:	18 06       	cpc	r1, r24
 584:	09 06       	cpc	r0, r25
 586:	08 95       	ret

00000588 <__fp_pscB>:
 588:	00 24       	eor	r0, r0
 58a:	0a 94       	dec	r0
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	05 06       	cpc	r0, r21
 594:	08 95       	ret

00000596 <__fp_round>:
 596:	09 2e       	mov	r0, r25
 598:	03 94       	inc	r0
 59a:	00 0c       	add	r0, r0
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__fp_round+0xc>
 59e:	88 23       	and	r24, r24
 5a0:	52 f0       	brmi	.+20     	; 0x5b6 <__fp_round+0x20>
 5a2:	bb 0f       	add	r27, r27
 5a4:	40 f4       	brcc	.+16     	; 0x5b6 <__fp_round+0x20>
 5a6:	bf 2b       	or	r27, r31
 5a8:	11 f4       	brne	.+4      	; 0x5ae <__fp_round+0x18>
 5aa:	60 ff       	sbrs	r22, 0
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__fp_round+0x20>
 5ae:	6f 5f       	subi	r22, 0xFF	; 255
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	08 95       	ret

000005b8 <__fp_split3>:
 5b8:	57 fd       	sbrc	r21, 7
 5ba:	90 58       	subi	r25, 0x80	; 128
 5bc:	44 0f       	add	r20, r20
 5be:	55 1f       	adc	r21, r21
 5c0:	59 f0       	breq	.+22     	; 0x5d8 <__fp_splitA+0x10>
 5c2:	5f 3f       	cpi	r21, 0xFF	; 255
 5c4:	71 f0       	breq	.+28     	; 0x5e2 <__fp_splitA+0x1a>
 5c6:	47 95       	ror	r20

000005c8 <__fp_splitA>:
 5c8:	88 0f       	add	r24, r24
 5ca:	97 fb       	bst	r25, 7
 5cc:	99 1f       	adc	r25, r25
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <__fp_splitA+0x20>
 5d0:	9f 3f       	cpi	r25, 0xFF	; 255
 5d2:	79 f0       	breq	.+30     	; 0x5f2 <__fp_splitA+0x2a>
 5d4:	87 95       	ror	r24
 5d6:	08 95       	ret
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	14 06       	cpc	r1, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	f2 cf       	rjmp	.-28     	; 0x5c6 <__fp_split3+0xe>
 5e2:	46 95       	lsr	r20
 5e4:	f1 df       	rcall	.-30     	; 0x5c8 <__fp_splitA>
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <__fp_splitA+0x30>
 5e8:	16 16       	cp	r1, r22
 5ea:	17 06       	cpc	r1, r23
 5ec:	18 06       	cpc	r1, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	f1 cf       	rjmp	.-30     	; 0x5d4 <__fp_splitA+0xc>
 5f2:	86 95       	lsr	r24
 5f4:	71 05       	cpc	r23, r1
 5f6:	61 05       	cpc	r22, r1
 5f8:	08 94       	sec
 5fa:	08 95       	ret

000005fc <__fp_zero>:
 5fc:	e8 94       	clt

000005fe <__fp_szero>:
 5fe:	bb 27       	eor	r27, r27
 600:	66 27       	eor	r22, r22
 602:	77 27       	eor	r23, r23
 604:	cb 01       	movw	r24, r22
 606:	97 f9       	bld	r25, 7
 608:	08 95       	ret

0000060a <__mulsf3>:
 60a:	0b d0       	rcall	.+22     	; 0x622 <__mulsf3x>
 60c:	c4 cf       	rjmp	.-120    	; 0x596 <__fp_round>
 60e:	b5 df       	rcall	.-150    	; 0x57a <__fp_pscA>
 610:	28 f0       	brcs	.+10     	; 0x61c <__mulsf3+0x12>
 612:	ba df       	rcall	.-140    	; 0x588 <__fp_pscB>
 614:	18 f0       	brcs	.+6      	; 0x61c <__mulsf3+0x12>
 616:	95 23       	and	r25, r21
 618:	09 f0       	breq	.+2      	; 0x61c <__mulsf3+0x12>
 61a:	a6 cf       	rjmp	.-180    	; 0x568 <__fp_inf>
 61c:	ab cf       	rjmp	.-170    	; 0x574 <__fp_nan>
 61e:	11 24       	eor	r1, r1
 620:	ee cf       	rjmp	.-36     	; 0x5fe <__fp_szero>

00000622 <__mulsf3x>:
 622:	ca df       	rcall	.-108    	; 0x5b8 <__fp_split3>
 624:	a0 f3       	brcs	.-24     	; 0x60e <__mulsf3+0x4>

00000626 <__mulsf3_pse>:
 626:	95 9f       	mul	r25, r21
 628:	d1 f3       	breq	.-12     	; 0x61e <__mulsf3+0x14>
 62a:	95 0f       	add	r25, r21
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	55 1f       	adc	r21, r21
 630:	62 9f       	mul	r22, r18
 632:	f0 01       	movw	r30, r0
 634:	72 9f       	mul	r23, r18
 636:	bb 27       	eor	r27, r27
 638:	f0 0d       	add	r31, r0
 63a:	b1 1d       	adc	r27, r1
 63c:	63 9f       	mul	r22, r19
 63e:	aa 27       	eor	r26, r26
 640:	f0 0d       	add	r31, r0
 642:	b1 1d       	adc	r27, r1
 644:	aa 1f       	adc	r26, r26
 646:	64 9f       	mul	r22, r20
 648:	66 27       	eor	r22, r22
 64a:	b0 0d       	add	r27, r0
 64c:	a1 1d       	adc	r26, r1
 64e:	66 1f       	adc	r22, r22
 650:	82 9f       	mul	r24, r18
 652:	22 27       	eor	r18, r18
 654:	b0 0d       	add	r27, r0
 656:	a1 1d       	adc	r26, r1
 658:	62 1f       	adc	r22, r18
 65a:	73 9f       	mul	r23, r19
 65c:	b0 0d       	add	r27, r0
 65e:	a1 1d       	adc	r26, r1
 660:	62 1f       	adc	r22, r18
 662:	83 9f       	mul	r24, r19
 664:	a0 0d       	add	r26, r0
 666:	61 1d       	adc	r22, r1
 668:	22 1f       	adc	r18, r18
 66a:	74 9f       	mul	r23, r20
 66c:	33 27       	eor	r19, r19
 66e:	a0 0d       	add	r26, r0
 670:	61 1d       	adc	r22, r1
 672:	23 1f       	adc	r18, r19
 674:	84 9f       	mul	r24, r20
 676:	60 0d       	add	r22, r0
 678:	21 1d       	adc	r18, r1
 67a:	82 2f       	mov	r24, r18
 67c:	76 2f       	mov	r23, r22
 67e:	6a 2f       	mov	r22, r26
 680:	11 24       	eor	r1, r1
 682:	9f 57       	subi	r25, 0x7F	; 127
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	8a f0       	brmi	.+34     	; 0x6aa <__mulsf3_pse+0x84>
 688:	e1 f0       	breq	.+56     	; 0x6c2 <__mulsf3_pse+0x9c>
 68a:	88 23       	and	r24, r24
 68c:	4a f0       	brmi	.+18     	; 0x6a0 <__mulsf3_pse+0x7a>
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	bb 1f       	adc	r27, r27
 694:	66 1f       	adc	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	91 50       	subi	r25, 0x01	; 1
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	a9 f7       	brne	.-22     	; 0x68a <__mulsf3_pse+0x64>
 6a0:	9e 3f       	cpi	r25, 0xFE	; 254
 6a2:	51 05       	cpc	r21, r1
 6a4:	70 f0       	brcs	.+28     	; 0x6c2 <__mulsf3_pse+0x9c>
 6a6:	60 cf       	rjmp	.-320    	; 0x568 <__fp_inf>
 6a8:	aa cf       	rjmp	.-172    	; 0x5fe <__fp_szero>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	ec f3       	brlt	.-6      	; 0x6a8 <__mulsf3_pse+0x82>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	dc f3       	brlt	.-10     	; 0x6a8 <__mulsf3_pse+0x82>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	e7 95       	ror	r30
 6be:	9f 5f       	subi	r25, 0xFF	; 255
 6c0:	c1 f7       	brne	.-16     	; 0x6b2 <__mulsf3_pse+0x8c>
 6c2:	fe 2b       	or	r31, r30
 6c4:	88 0f       	add	r24, r24
 6c6:	91 1d       	adc	r25, r1
 6c8:	96 95       	lsr	r25
 6ca:	87 95       	ror	r24
 6cc:	97 f9       	bld	r25, 7
 6ce:	08 95       	ret

000006d0 <__umulhisi3>:
 6d0:	a2 9f       	mul	r26, r18
 6d2:	b0 01       	movw	r22, r0
 6d4:	b3 9f       	mul	r27, r19
 6d6:	c0 01       	movw	r24, r0
 6d8:	a3 9f       	mul	r26, r19
 6da:	01 d0       	rcall	.+2      	; 0x6de <__umulhisi3+0xe>
 6dc:	b2 9f       	mul	r27, r18
 6de:	70 0d       	add	r23, r0
 6e0:	81 1d       	adc	r24, r1
 6e2:	11 24       	eor	r1, r1
 6e4:	91 1d       	adc	r25, r1
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
